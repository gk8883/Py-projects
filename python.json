{
    "FUNCTIONS":{
        "abs()": "Returns the absolute value of a number\n",
        "all()": "Returns True if all items in an iterable object are true\n",
        "any()": "Returns True if any item in an iterable object is true\n",
        "ascii()": "Returns a readable version of an object. Replaces none-ascii characters with escape character\n",
        "bin()": "Returns the binary version of a number\n",
        "bool()": "Returns the boolean value of the specified object\n",
        "bytearray()": "Returns an array of bytes\n",
        "bytes()": "Returns a bytes object\n",
        "callable()": "Returns True if the specified object is callable, otherwise False\n",
        "chr()": "Returns a character from the specified Unicode code.\n",
        "classmethod()": "Converts a method into a class method\n",
        "compile()": "Returns the specified source as an object, ready to be executed\n",
        "complex()": "Returns a complex number\n",
        "delattr()": "Deletes the specified attribute (property or method) from the specified object\n",
        "dict()": "Returns a dictionary (Array)\n",
        "dir()": "Returns a list of the specified object's properties and methods\n",
        "divmod()": "Returns the quotient and the remainder when argument1 is divided by argument2\n",
        "enumerate()": "Takes a collection (e.g. a tuple) and returns it as an enumerate object\n",
        "eval()": "Evaluates and executes an expression\n",
        "exec()": "Executes the specified code (or object)\n",
        "filter()": "Use a filter function to exclude items in an iterable object\n",
        "float()": "Returns a floating point number\n",
        "format()": "Formats specified values in a string\n",
        "frozenset()": "Returns a frozenset object\n",
        "getattr()": "Returns the value of the specified attribute (property or method)\n",
        "globals()": "Returns the current global symbol table as a dictionary\n",
        "hasattr()": "Returns True if the specified object has the specified attribute (property/method)\n",
        "hash()": "Returns the hash value of a specified object\n",
        "help()": "Executes the built-in help system\n",
        "hex()": "Converts a number into a hexadecimal value\n",
        "id()": "Returns the id of an object\n",
        "input()": "Allowing user input\n",
        "int()": "Returns an integer number\n",
        "isinstance()": "Returns True if a specified object is an instance of a specified object\n",
        "issubclass()": "Returns True if a specified class is a subclass of a specified object\n",
        "iter()": "Returns an iterator object\n",
        "len()": "Returns the length of an object\n",
        "list()": "Returns a list\n",
        "locals()": "Returns an updated dictionary of the current local symbol table\n",
        "map()": "Returns the specified iterator with the specified function applied to each item\n",
        "max()": "Returns the largest item in an iterable\n",
        "memoryview()": "Returns a memory view object\n",
        "min()": "Returns the smallest item in an iterable\n",
        "next()": "Returns the next item in an iterable\n",
        "object()": "Returns a new object\n",
        "oct()": "Converts a number into an octal\n",
        "open()": "Opens a file and returns a file object\n",
        "ord()": "Convert an integer representing the Unicode of the specified character\n",
        "pow()": "Returns the value of x to the power of y\n",
        "print()": "Prints to the standard output device\n",
        "property()": "Gets, sets, deletes a property\n",
        "range()": "Returns a sequence of numbers, starting from 0 and increments by 1 (by default)\n",
        "repr()": "Returns a readable version of an object\n",
        "reversed()": "Returns a reversed iterator\n",
        "round()": "Rounds a numbers\n",
        "set()": "Returns a new set object\n",
        "setattr()": "Sets an attribute (property/method) of an object\n",
        "slice()": "Returns a slice object\n",
        "sorted()": "Returns a sorted list\n",
        "@staticmethod()": "Converts a method into a static method\n",
        "str()": "Returns a string object\n",
        "sum()": "Sums the items of an iterator\n",
        "super()": "Returns an object that represents the parent class\n",
        "tuple()": "Returns a tuple\n",
        "type()": "Returns the type of an object\n",
        "vars()": "Returns the __dict__ property of an object\n",
        "zip()": "Returns an iterator, from two or more iterators\n"
    },
    "LIST":{
        "append()": "Adds an element at  the end of the list\n",
        "clear()": "Removes all the  elements from the set\n",
        "copy()": "Returns a copy of the set\n",
        "count()": "Returns the number of times a specified value occurs in a string\n",
        "extend()": "Add the elements of a  list (or any iterable), to the end of the current list\n",
        "index()": "Searches the string for a specified value and returns the position of where it was found\n",
        "insert()": "Adds an element at  the specified position\n",
        "pop()": "Removes an element from the  set\n",
        "remove()": "Removes the specified element\n",
        "reverse()": "Reverses the order  of the list\n",
        "sort()": "Sorts the list\n"
    },
    "TUPLE":{
        "count()": "Returns the number of times a specified value occurs in a tuple\n",
        "index()": "Searches the tuple for a specified value and returns the position of where it was found\n"
    },
    "DICTIONARY":{
        "fromkeys()": "Returns a dictionary with the specified keys and value\n",
        "get()": "Returns the value of the specified key\n",
        "items()": "Returns a list containing a tuple for each key value pair\n",
        "keys()": "Returns a list containing the dictionary's keys\n",
        "popitem()": "Removes the last  inserted key-value pair\n",
        "setdefault()": "Returns the value of the specified key. If the key does not exist -> insert the key, with the specified value\n",
        "update()": "Update the set with  another set, or any other iterable\n",
        "values()": "Returns a list of all the values in the dictionary\n"
    },
    "SET":{
        "add()": "Adds an element to the  set\n",
        "difference()": "Returns a set containing the difference between two or more sets\n",
        "difference_update()": "Removes the items in this set that are also included in another, specified set\n",
        "discard()": "Remove the specified  item\n",
        "intersection()": "Returns a set, that is the intersection of two or more sets\n",
        "intersection_update()": " Removes the items in this set that are not present in other, specified set(s)\n",
        "isdisjoint()": "Returns whether two sets have a intersection or not\n",
        "issubset()": "Returns whether another set contains this set or not\n",
        "issuperset()": "Returns whether this set contains another set or not\n",
        "symmetric_difference()": "Returns a set with the symmetric differences of two sets\n",
        "symmetric_difference_update()": " inserts the symmetric differences from this set and another\n",
        "union()": "Return a set containing the union of sets\n",
        "update()": "Update the set with another set, or any other iterable"
    },
    "STRING":{
        "capitalize()": "Converts the first character to upper case\n",
        "casefold()": "Converts string into lower case\n",
        "center()": "Returns a centered string\n",
        "encode()": "Returns an encoded version of the string\n",
        "endswith()": "Returns true if the string ends with the specified value\n",
        "expandtabs()": "Sets the tab size of the string\n",
        "find()": "Searches the string for a specified value and returns the position of where it was found\n",
        "format_map()": "Formats specified values in a string\n",
        "isalnum()": "Returns True if all characters in the string are alphanumeric\n",
        "isalpha()": "Returns True if all characters in the string are in the alphabet\n",
        "isdecimal()": "Returns True if all characters in the string are decimals\n",
        "isdigit()": "Returns True if all characters in the string are digits\n",
        "isidentifier()": "Returns True if the string is an identifier\n",
        "islower()": "Returns True if all characters in the string are lower case\n",
        "isnumeric()": "Returns True if all characters in the string are numeric\n",
        "isprintable()": "Returns True if all characters in the string are printable\n",
        "isspace()": "Returns True if all characters in the string are whitespaces\n",
        "istitle()": "Returns True if the string follows the rules of a title\n",
        "isupper()": "Returns True if all characters in the string are upper case\n",
        "join()": "Joins the elements of an iterable to the end of the string\n",
        "ljust()": "Returns a left justified version of the string\n",
        "lower()": "Converts a string into lower case\n",
        "lstrip()": "Returns a left trim version of the string\n",
        "maketrans()": "Returns a translation table to be used in translations\n",
        "partition()": "Returns a tuple where the string is parted into three parts\n",
        "replace()": "Returns a string where a specified value is replaced with a specified value\n",
        "rfind()": "Searches the string for a specified value and returns the last position of where it was found\n",
        "rindex()": "Searches the string for a specified value and returns the last position of where it was found\n",
        "rjust()": "Returns a right justified version of the string\n",
        "rpartition()": "Returns a tuple where the string is parted into three parts\n",
        "rsplit()": "Splits the string at the specified separator, and returns a list\n",
        "rstrip()": "Returns a right trim version of the string\n",
        "split()": "Splits the string at the specified separator, and returns a list\n",
        "splitlines()": "Splits the string at line breaks and returns a list\n",
        "startswith()": "Returns true if the string starts with the specified value\n",
        "strip()": "Returns a trimmed version of the string\n",
        "swapcase()": "Swaps cases, lower case becomes upper case and vice versa\n",
        "title()": "Converts the first character of each word to upper case\n",
        "translate()": "Returns a translated string\n",
        "upper()": "Converts a string into upper case\n",
        "zfill()": "Fills the string with a specified number of 0 values at the beginning\n"
    },
    "FILE":{
        "close()": "Closes the file\n",
        "detach()": "Returns the separated raw stream from the buffer\n",
        "fileno()": "Returns a number that represents the stream, from the operating system's perspective\n",
        "flush()": "Flushes the internal buffer\n",
        "isatty()": "Returns whether the file stream is interactive or not\n",
        "read()": "Returns the file content\n",
        "readable()": "Returns whether the file stream can be read or not\n",
        "readline()": "Returns one line from the file\n",
        "readlines()": "Returns a list of lines from the file\n",
        "seek()": "Change the file position\n",
        "seekable()": "Returns whether the file allows us to change the file position\n",
        "tell()": "Returns the current file position\n",
        "truncate()": "Resizes the file to a specified size\n",
        "writable()": "Returns whether the file can be written to or not\n",
        "write()": "Writes the specified string to the file\n",
        "writelines()": "Writes a list of strings to the file\n"
    },
    "EXCEPTIONS":{
        "ArithmeticError": "Raised when an error occurs in numeric calculations\n",
        "AssertionError": "Raised when an assert statement fails\n",
        "AttributeError": "Raised when attribute reference or assignment fails\n",
        "Exception": "Base class for all exceptions\n",
        "EOFError": "Raised when the input() method hits an \"end of file\" condition (EOF)\n",
        "FloatingPointError": "Raised when a floating point calculation fails\n",
        "GeneratorExit": "Raised when a generator is closed (with the close() method)\n",
        "ImportError": "Raised when an imported module does not exist\n",
        "IndentationError": "Raised when indendation is not correct\n",
        "IndexError": "Raised when an index of a sequence does not exist\n",
        "KeyError": "Raised when a key does not exist in a dictionary\n",
        "KeyboardInterrupt": "Raised when the user presses Ctrl+c, Ctrl+z or Delete\n",
        "LookupError": "Raised when errors raised cant be found\n",
        "MemoryError": "Raised when a program runs out of memory\n",
        "NameError": "Raised when a variable does not exist\n",
        "NotImplementedError": "Raised when an abstract method requires an inherited class to override the method\n",
        "OSError": "Raised when a system related operation causes an error \n",
        "OverflowError": "Raised when the result of a numeric calculation is too large\n",
        "ReferenceError": "Raised when a weak reference object does not exist\n",
        "RuntimeError": "Raised when an error occurs that do not belong to any specific expections\n",
        "StopIteration": "Raised when the next() method of an iterator has no further values\n",
        "SyntaxError": "Raised when a syntax error occurs\n",
        "TabError": "Raised when indentation consists of tabs or spaces\n",
        "SystemError": "Raised when a system error occurs\n",
        "SystemExit": "Raised when the sys.exit() function is called\n",
        "TypeError": "Raised when two different types are combined\n",
        "UnboundLocalError": "Raised when a local variable is referenced before assignment\n",
        "UnicodeError": "Raised when a unicode problem occurs\n",
        "UnicodeEncodeError": "Raised when a unicode encoding problem occurs\n",
        "UnicodeDecodeError": "Raised when a unicode decoding problem occurs\n",
        "UnicodeTranslateError": "Raised when a unicode translation problem occurs\n",
        "ValueError": "Raised when there is a wrong value in a specified data type\n",
        "ZeroDivisionError": "Raised when the second operator in a division is zero\n"
    },
    "KEYWORDS":{
        "and": "A logical operator\n",
        "as": "To create an alias\n",
        "assert": "For debugging\n",
        "break": "To break out of a loop\n",
        "class": "To define a class\n",
        "continue": "To continue to the  next iteration of a loop\n",
        "def": "To define a function\n",
        "del": "To delete an object\n",
        "elif": "Used in conditional  statements, same as else if\n",
        "else": "Used in conditional  statements\n",
        "except": "Used with exceptions,  what to do when an exception occurs\n",
        "False": "Boolean value, result of  comparison operations\n",
        "finally": "Used with exceptions, a  block of code that will be executed no matter if there is an exception or  not\n",
        "for": "To create a for loop\n",
        "from": "To import specific parts of  a module\n",
        "global": "To declare a global  variable\n",
        "if": "To make a conditional  statement\n",
        "import": "To import a module\n",
        "in": "To check if a value is  present in a list, tuple, etc.\n",
        "is": "To test if two variables are  equal\n",
        "lambda": "To create an anonymous  function \n",
        "None": "Represents a null value\n",
        "nonlocal": "To declare a  non-local variable\n",
        "not": "A logical operator\n",
        "or": "A logical operator\n",
        "pass": "A null statement, a statement that will do nothing\n",
        "raise": "To raise an exception\n",
        "return": "To exit a function and return a value\n",
        "True": "Boolean value, result of  comparison operations\n",
        "try": "To make a try...except statement\n",
        "while": "To create a while loop\n",
        "with": "Used to simplify exception handling\n",
        "yield": "To end a function, returns a generator\n"
    }
}